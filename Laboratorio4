// Laboratorio 4 finalizado
//------------------------------------------------------------------------------
// Encabezado
//------------------------------------------------------------------------------
// Universidad del valle de Guatemala
// IE2023 Programación de Microcontroladores
// Author : Fernando José Pérez Palomo - 22357
// Laboratorio: Laboratorio4.asm
// Descripción: contador de 8 bits usando pushbuttons y display con señales analógicas (ADC)
// Hardware: ATMega328P

#include <avr/io.h>  // Incluye la biblioteca AVR I/O para el manejo de los registros de entrada/salida del microcontrolador.
#include <avr/interrupt.h>  // Incluye la biblioteca para habilitar y manejar las interrupciones.
#include <util/delay.h>  // Incluye la biblioteca para utilizar la función de retraso _delay_ms().

volatile uint8_t contador = 0;  // Variable que almacena el valor del contador.
volatile uint8_t valoradc = 0;  // Variable que almacena el valor del ADC.
volatile uint8_t bmenosig = 0;  // Variable que almacena los 4 bits menos significativos del ADC.
volatile uint8_t bmasig = 0;  // Variable que almacena los 4 bits más significativos del ADC.
volatile uint8_t display = 0;  // Variable que determina qué display se activa.

uint8_t Milista[] = {0b01000000, 0b01111001, 0b00100100, 0b00110000, 0b00011001, 0b00010010, 0b00000010, 0b01111000, 0b00000000, 0b00010000, 0b10001000, 0b10000011, 0b11000110, 0b10100001, 0b10000110, 0b10001110};  // Arreglo que contiene los valores de los segmentos para los dígitos del display de 7 segmentos.

void setup(void) {
	cli();  // Deshabilita las interrupciones globales.
	DDRD = 0xFF;  // Configura el puerto D como salida.
	PORTD = contador;  // Configura el puerto D con el valor inicial del contador.
	DDRB = 0xFF;  // Configura el puerto B como salida.
	PORTB = 0;  // Apaga el puerto B.
	// Habilita las interrupciones externas para PC0 y PC1.
	PCICR |= (1 << PCIE1);
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
	// Configura el ADC.
	ADMUX |= (1 << REFS0);  // Configura la referencia de voltaje.
	ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << ADLAR);  // Configura la justificación a la izquierda.
	ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);  // Configura el canal ADC7.
	ADCSRA |= (1 << ADIE);  // Habilita la interrupción del ADC.
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Configura el prescaler a 128.
	ADCSRA |= (1 << ADEN);  // Habilita el ADC.
	sei();  // Habilita las interrupciones globales.
}

void InitADC(void) {
	// Se inicializa el ADC en la función setup() ahora.
}

int main(void) {
	setup();
	InitADC();
	
	while (1) {
		ADCSRA |= (1 << ADSC);  // Inicia la conversión ADC.
		_delay_ms(100);  // Espera un tiempo antes de leer el ADC.
		display = 1;  // Enciende el primer display.
		PORTB = display;
		PORTD = contador;  // Muestra el contador en el puerto D.
		if (contador < valoradc) {  // Enciende el LED de alarma si el contador es menor que el valor ADC.
			PORTB = (display + 8);
		}
	}
	return 0;
}

ISR(PCINT1_vect) {
	// Se mantiene la misma funcionalidad de las interrupciones de los botones.
}

ISR(ADC_vect) {  // ISR para la interrupción del ADC
	valoradc = ADCH;  // Almacena el valor del ADC en la variable valoradc.
	bmenosig = valoradc & 0b00001111;  // Extrae los 4 bits menos significativos del valor del ADC.
	bmasig = (valoradc >> 4);  // Desplaza los 4 bits más significativos del valor del ADC.
	_delay_ms(100);  // Espera 100 milisegundos.
	display = 2;  // Establece el valor de display a 2, lo que indica que se activará el segundo display.
	PORTB = display;  // Establece el valor del puerto B con el valor de display.
	PORTD = Milista[bmenosig];  // Muestra el valor correspondiente del arreglo Milista en el primer display.
	_delay_ms(100);  // Espera 100 milisegundos.
	display = 4;  // Establece el valor de display a 4, lo que indica que se activará el tercer display.
	PORTB = display;  // Establece el valor del puerto B con el valor de display.
	PORTD = Milista[bmasig];  // Muestra el valor correspondiente del arreglo Milista en el segundo display.
	ADCSRA |= (1 << ADIF);  // Borra la bandera de interrupción del ADC.
}
